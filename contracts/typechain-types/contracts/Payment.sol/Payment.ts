/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Payment {
  export type TxStruct = {
    buyer: AddressLike;
    id: BigNumberish;
    homeId: BigNumberish;
    units: BigNumberish;
    fulfilled: boolean;
  };

  export type TxStructOutput = [
    buyer: string,
    id: bigint,
    homeId: bigint,
    units: bigint,
    fulfilled: boolean
  ] & {
    buyer: string;
    id: bigint;
    homeId: bigint;
    units: bigint;
    fulfilled: boolean;
  };
}

export interface PaymentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptedTokens"
      | "fractional"
      | "fulfillTx"
      | "makePayment"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "txRecords"
      | "updateTokenAccepted"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "Pay"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fractional",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillTx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makePayment",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "txRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenAccepted",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fractional", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfillTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txRecords", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayEvent {
  export type InputTuple = [
    txId: BigNumberish,
    buyer: AddressLike,
    homeId: BigNumberish,
    units: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    txId: bigint,
    buyer: string,
    homeId: bigint,
    units: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    txId: bigint;
    buyer: string;
    homeId: bigint;
    units: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Payment extends BaseContract {
  connect(runner?: ContractRunner | null): Payment;
  waitForDeployment(): Promise<this>;

  interface: PaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  fractional: TypedContractMethod<[], [string], "view">;

  fulfillTx: TypedContractMethod<[txId: BigNumberish], [void], "nonpayable">;

  makePayment: TypedContractMethod<
    [payToken: AddressLike, homeId: BigNumberish, units: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  txRecords: TypedContractMethod<
    [txId: BigNumberish],
    [Payment.TxStructOutput],
    "view"
  >;

  updateTokenAccepted: TypedContractMethod<
    [token: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "fractional"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fulfillTx"
  ): TypedContractMethod<[txId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "makePayment"
  ): TypedContractMethod<
    [payToken: AddressLike, homeId: BigNumberish, units: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "txRecords"
  ): TypedContractMethod<
    [txId: BigNumberish],
    [Payment.TxStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateTokenAccepted"
  ): TypedContractMethod<
    [token: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Pay"
  ): TypedContractEvent<
    PayEvent.InputTuple,
    PayEvent.OutputTuple,
    PayEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Pay(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      PayEvent.InputTuple,
      PayEvent.OutputTuple,
      PayEvent.OutputObject
    >;
    Pay: TypedContractEvent<
      PayEvent.InputTuple,
      PayEvent.OutputTuple,
      PayEvent.OutputObject
    >;
  };
}
